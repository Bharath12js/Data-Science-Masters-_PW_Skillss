{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8527aca2-02a8-420b-b158-11e209c87411",
   "metadata": {},
   "source": [
    "# FLASK ASSIGNMENT 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fe188cf-792c-44e5-8ebf-84e4c8a3a64a",
   "metadata": {},
   "source": [
    "**Q1. What is Flask Framework? What are the advantages of Flask Framework?**\n",
    "\n",
    "Solution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d1ba84f-ad83-4443-8830-acdb20a12011",
   "metadata": {},
   "source": [
    "Flask is a lightweight and flexible web framework for Python. It is designed to be simple and easy to use, making it a popular choice for developing web applications and APIs. Here's an explanation of Flask and its advantages:\n",
    "\n",
    "Flask Framework:\n",
    "- Flask is a micro-framework, meaning it provides only the essential features needed to build web applications. It follows the WSGI (Web Server Gateway Interface) specification and can be easily integrated with other libraries and tools.\n",
    "- Flask is written in Python and offers a minimalistic approach, allowing developers to have more control and freedom in designing their application structure and architecture.\n",
    "- It provides a routing mechanism to map URLs to specific functions, supports template rendering for generating dynamic HTML content, and includes a built-in development server for quick and easy testing.\n",
    "\n",
    "Advantages of Flask Framework:\n",
    "1. Simplicity: Flask has a simple and intuitive design, making it easy to learn and understand. It has a minimalistic and unobtrusive approach that allows developers to focus on writing clean and efficient code.\n",
    "\n",
    "2. Lightweight: Flask is lightweight and has minimal dependencies. It does not impose a rigid structure or unnecessary features, allowing developers to have more flexibility and control over their projects. This also leads to faster application development and better performance.\n",
    "\n",
    "3. Flexibility: Flask provides a flexible and extensible framework. It allows developers to choose and integrate various components and libraries based on their specific needs. Flask works well with other Python libraries, making it highly adaptable to different project requirements.\n",
    "\n",
    "4. Modularity: Flask follows a modular design, allowing developers to easily break down their applications into smaller reusable components. This promotes code reusability, maintainability, and the ability to scale the application as needed.\n",
    "\n",
    "5. Extensive Documentation and Community Support: Flask has comprehensive documentation that guides developers through the process of building web applications. Additionally, Flask has a large and active community of developers who contribute plugins, extensions, and support, making it easier to find solutions and get help when needed.\n",
    "\n",
    "6. Integration: Flask seamlessly integrates with other popular tools and libraries, such as SQLAlchemy (for database integration), Jinja2 (for templating), and WTForms (for form validation). This integration capability allows developers to leverage the power of these tools within their Flask applications.\n",
    "\n",
    "7. Testing and Debugging: Flask provides built-in testing and debugging capabilities, making it easier to write unit tests and identify and resolve issues during development. It includes a built-in development server and a debugger that helps in the debugging process.\n",
    "\n",
    "Overall, the simplicity, flexibility, lightweight nature, and strong community support make Flask an advantageous choice for developing web applications and APIs, especially for small to medium-sized projects that require a high level of customization and control."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c38881dc-a66e-4a68-b1e2-3f142f6a59e6",
   "metadata": {},
   "source": [
    "**Q2. Create a simple Flask application to display ‘Hello World!!’. Attach the screenshot of the output in\n",
    "Jupyter Notebook.**\n",
    "\n",
    "Solution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "322e8355-34b7-4345-97c2-873b2738dfd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app '__main__'\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n",
      " * Running on http://127.0.0.1:5000\n",
      "Press CTRL+C to quit\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/')\n",
    "def hello_world():\n",
    "    return 'Hello World!!'\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17fb02cb-81a7-4719-a7c6-588cc1733d7a",
   "metadata": {},
   "source": [
    "###OUTPUT SCREENSHOT"
   ]
  },
  {
   "attachments": {
    "612d9859-44ec-41cb-a5b3-fbbbcc90d79b.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "ccc8821c-c480-47c8-8e98-c94d926495e5",
   "metadata": {},
   "source": [
    "![helloword.png](attachment:612d9859-44ec-41cb-a5b3-fbbbcc90d79b.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3087e1fa-6acc-402f-a234-d6dcf83d11f3",
   "metadata": {},
   "source": [
    "**Q3. What is App routing in Flask? Why do we use app routes?**\n",
    "\n",
    "Solution:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fafbe0f-e5ec-4aa8-9ae3-a1f2689bbb97",
   "metadata": {},
   "source": [
    "In Flask, app routing refers to the process of mapping URL routes to specific functions or view handlers in your Flask application. It allows you to define different endpoints or URLs for your application and specify what function should be executed when a user accesses a particular URL.\n",
    "\n",
    "When you define an app route in Flask, you are essentially creating a URL endpoint that can be accessed by users. The app route is associated with a specific function that will handle the request and generate a response.\n",
    "\n",
    "\n",
    "App routing is used in Flask for several reasons:\n",
    "\n",
    "1. URL Handling: App routing allows you to define clean and meaningful URLs for different parts of your application. It helps organize your application's functionality and provides a structured way to handle different routes.\n",
    "\n",
    "2. Request-Response Handling: By associating app routes with specific functions, Flask ensures that the appropriate function is executed when a user accesses a particular URL. This allows you to define custom logic for handling different routes and generating responses accordingly.\n",
    "\n",
    "3. Code Modularity: App routing promotes code modularity by allowing you to break down your application's functionality into different routes and associated functions. This makes your code more organized, maintainable, and easier to understand.\n",
    "\n",
    "4. Separation of Concerns: App routing helps separate the concerns of URL routing and view handling. It allows you to focus on defining the logic for generating responses in the associated functions while keeping the routing information separate.\n",
    "\n",
    "Overall, app routing in Flask provides a way to define URL routes and associate them with specific functions. It allows you to handle different parts of your application, generate appropriate responses, and organize your code effectively."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b1df8d1-084d-4cca-a0b1-b4aae0fe3eee",
   "metadata": {},
   "source": [
    "**Q4. Create a “/welcome” route to display the welcome message “Welcome to ABC Corporation” and a “/”\n",
    "route to show the following details:\n",
    "Company Name: ABC Corporation\n",
    "Location: India\n",
    "Contact Detail: 999-999-9999**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a05c46a-dac1-493a-920e-ea196c442e5b",
   "metadata": {},
   "source": [
    "Solution:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28c772d9-6c5b-4c8b-a3b8-ee18a13c48b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/welcome')\n",
    "def welcome():\n",
    "    return 'Welcome to ABC Corporation'\n",
    "\n",
    "@app.route('/')\n",
    "def company_details():\n",
    "    return '''\n",
    "    <h1>Company Details</h1>\n",
    "    <p><strong>Company Name:</strong> ABC Corporation</p>\n",
    "    <p><strong>Location:</strong> India</p>\n",
    "    <p><strong>Contact Detail:</strong> 999-999-9999</p>\n",
    "    '''\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6dcae7c-ed94-4b2a-8da4-cc0e11e5a852",
   "metadata": {},
   "source": [
    "* Serving Flask app \"__main__\" (lazy loading)\n",
    " * Environment: production\n",
    "   WARNING: This is a development server. Do not use it in a production deployment.\n",
    "   Use a production WSGI server instead.\n",
    " * Debug mode: off\n",
    " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)"
   ]
  },
  {
   "attachments": {
    "85e121ae-be10-42ed-b295-624bec564820.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "ca8e1248-cc64-43fb-b6cb-cf3ee5d12f66",
   "metadata": {},
   "source": [
    "![company.png](attachment:85e121ae-be10-42ed-b295-624bec564820.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ec02852-7af3-40e0-a3ce-2054b827dd6a",
   "metadata": {},
   "source": [
    "**Q5. What function is used in Flask for URL Building? Write a Python code to demonstrate the working of the\n",
    "url_for() function.**\n",
    "\n",
    "Solution:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad357cfd-8645-420d-bcfa-264c7a703ff8",
   "metadata": {},
   "source": [
    "In Flask, the `url_for()` function is used for URL building. It is a helper function that generates a URL for a specific route or endpoint in your Flask application. It takes the name of the function or endpoint as an argument and returns the corresponding URL.\n",
    "\n",
    "Here's an example code snippet to demonstrate the working of the `url_for()` function:\n",
    "\n",
    "```python\n",
    "from flask import Flask, url_for\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "@app.route('/hello')\n",
    "def hello():\n",
    "    return 'Hello, World!'\n",
    "\n",
    "@app.route('/user/<username>')\n",
    "def user_profile(username):\n",
    "    return f'Profile page of {username}'\n",
    "\n",
    "@app.route('/about')\n",
    "def about():\n",
    "    return 'About page'\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    with app.test_request_context():\n",
    "        # Generating URLs using url_for()\n",
    "        hello_url = url_for('hello')\n",
    "        user_url = url_for('user_profile', username='john')\n",
    "        about_url = url_for('about')\n",
    "\n",
    "        # Printing the generated URLs\n",
    "        print(f'URL for hello(): {hello_url}')\n",
    "        print(f'URL for user_profile(): {user_url}')\n",
    "        print(f'URL for about(): {about_url}')\n",
    "```\n",
    "\n",
    "In this example, we have defined three routes: `/hello`, `/user/<username>`, and `/about`. We use the `url_for()` function within the `with app.test_request_context()` context manager to generate the URLs for these routes.\n",
    "\n",
    "The `url_for()` function takes the name of the route's function or endpoint as the first argument. In the case of the `/user/<username>` route, we also pass the `username` parameter as a keyword argument to the `url_for()` function.\n",
    "\n",
    "When we run the code, the `url_for()` function generates the URLs for the specified routes. The generated URLs are then printed to the console. Here's the expected output:\n",
    "\n",
    "```\n",
    "URL for hello(): /hello\n",
    "URL for user_profile(): /user/john\n",
    "URL for about(): /about\n",
    "```\n",
    "\n",
    "As you can see, the `url_for()` function generates the correct URLs based on the provided route names and parameters. It ensures that the URLs are constructed accurately, taking into account any route parameters specified.\n",
    "\n",
    "Note: In a real Flask application, you would typically use the `url_for()` function within the templates or view functions to generate URLs dynamically. This allows for flexibility and ensures that your application's URLs are generated correctly even if you make changes to the routes in the future."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0031cac-7d1d-4241-9276-d796ba958101",
   "metadata": {},
   "source": [
    "# --------------------------------------------END----------------------------------------"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
